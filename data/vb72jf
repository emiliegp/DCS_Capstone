0
"Good resources for Fintech architecture, patterns and best practices?"
2022-06-13 18:05:36
"Hi, apologies if this isn't appropriate

I work in programming, on Go microservices. I would like to branch out into Fintech, but I've become stuck on a couple of interviews recently with architecture questions. Basically, I've never worked in something with the level of security and redundancy required that there is in fintech, transactions failing just isn't such a big deal in media!

I'm keen to understand the finer details of Fintech and learn that. Does anyone have any recommendations for learning the real nitty gritty? 

An example is one of the questions was around guaranteeing transactions through entire services. My answer was poor, but revolved around a guess of having a source of truth in an event log that could be replayed and checked against, and using database transactions, which I know now is wrong, but I'm very interested to know what else I don't know.

Cheers"
"[""To answer your question on how we guarantee transactions we use one of the following depending on the throughput  \n1. Database replication using a primary and secondary DB's   \n2. Message Queues (IBM Websphere / Tibco or any of the open source ones like Kafka or RabbitMQ). This allows the transaction to reside in the Product / Service Database and a message is triggered to the core banking solution to update the customer accounts.  \n\n\nIn fintech both speed and accuracy is important. Let me know if you hhany other questions. Will be happy to answer."", 'Good comments so far. Also look into concepts regarding preventing replay, idempotency, and UID tracing (it is rare a transaction is done on one system; so usually need a reliable way to trace through multiple systems). Another concept to consider is a “router” component (software) that is responsible for ensuring the transaction gets to all the itinerary stops it needs to get to (e.g. fraud engine, account balance, velocity checks, rule engine, user preferences, etc) and then assembles the singular “approve” or “decline” response. Lastly, in some systems, time-to-respond is an architectural factor (e.g. can’t make the customer wait too long at the point-of-sale), so each subsystem is often only allotted milliseconds of time to perform its function and timers (and their configuration and monitoring) become essential to the overall success of transaction processing.', 'I was just reading through this article, is this not something you would use? \n\nhttps://developers.redhat.com/blog/2018/10/01/patterns-for-distributed-transactions-within-a-microservices-architecture#conclusion\n\nWith the message queue, how do you guarantee retries for errors or rollbacks?', ""Implementing microservices in a high volume environments is a challenge. In the link that you posted the UI  (Angular or React ) should make multiple calls for the transaction to complete a full cycle. I would prefer to implement this using a messaging queue where the transactions are updated by the backend processors once the messages are received rather than be triggered by the UI. This is the mechanism that the Payment Card Industry uses to update credit card transactions. That is a card transaction doesn't appear in the statement immediately it goes through several processors like fraud checks etc before making its way into your statatement. This is noticeable in international transactions.""]"
